import { useState } from 'react';
import { 
  X, Server, HardDrive, ShieldAlert, Info, Zap, Network, Globe, 
  Terminal, Activity, Shield, AlertCircle, Loader2 
} from 'lucide-react';

interface IpInfoResult {
  ip: string;
  hostname: string | null;
  isp: string | null;
  organization: string | null;
  location: {
    city: string | null;
    region: string | null;
    country: string | null;
    postal: string | null;
    timezone: string | null;
    lat: number | null;
    lon: number | null;
  };
  asn: {
    asn: string | null;
    name: string | null;
    route: string | null;
  };
  ports: Array<{
    port: number;
    protocol: string;
    state: string;
    service: string;
    version: string | null;
  }>;
  vulnerabilities: Array<{
    name: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    description: string;
    cve: string | null;
  }>;
  dns: {
    mx: string[] | null;
    ns: string[] | null;
  };
  whois: {
    registrar: string | null;
    creation_date: string | null;
  };
  threat: {
    is_tor: boolean;
    is_proxy: boolean;
    is_vpn: boolean;
  };
}

interface ExploitOptionsProps {
  onClose: () => void;
}

export default function ZeroDayExploitTool({ onClose }: ExploitOptionsProps) {
  const [ipAddress, setIpAddress] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [ipInfo, setIpInfo] = useState<IpInfoResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const fetchIpInfo = async () => {
    if (!ipAddress) {
      setError('Please enter a valid IP address');
      return;
    }

    setIsLoading(true);
    setError(null);
    
    try {
      const response = await fetch('http://localhost:8000/api/scan/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ ip: ipAddress }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to scan target');
      }

      const result = await response.json();
      setIpInfo(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to scan target');
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setIpInfo(null);
    setIpAddress('');
    setError(null);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-900 rounded-lg p-6 w-[90%] max-w-4xl max-h-[90vh] overflow-auto relative">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-white"
        >
          <X className="w-6 h-6" />
        </button>
        
        <h2 className="text-xl text-white font-semibold mb-4 flex items-center gap-2">
          <Zap className="w-5 h-5 text-yellow-400" /> Zero Day Exploit Scanner
        </h2>
        
        {error && (
          <div className="bg-red-900 text-white p-3 rounded-lg mb-4 flex items-center gap-2">
            <AlertCircle className="w-5 h-5" /> {error}
          </div>
        )}

        {ipInfo ? (
          <div className="space-y-6">
            <div className="bg-gray-800 rounded-lg p-4">
              <h3 className="text-white font-medium mb-4 text-lg flex items-center gap-2">
                <Activity className="w-5 h-5 text-blue-400" /> 
                Target Analysis: {ipInfo.ip}
                {(ipInfo.threat.is_tor || ipInfo.threat.is_proxy || ipInfo.threat.is_vpn) && (
                  <span className="bg-red-600 text-white text-xs px-2 py-1 rounded-full ml-2">
                    SUSPICIOUS
                  </span>
                )}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="bg-gray-700 p-4 rounded-lg">
                  <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                    <Server className="w-4 h-4" /> Network Information
                  </h4>
                  <div className="space-y-2">
                    <div>
                      <p className="text-gray-400 text-sm">Hostname</p>
                      <p className="text-white font-mono">{ipInfo.hostname || 'Unknown'}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">ISP</p>
                      <p className="text-white">{ipInfo.isp || 'Unknown'}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Organization</p>
                      <p className="text-white">{ipInfo.organization || 'Unknown'}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">ASN</p>
                      <p className="text-white">{ipInfo.asn.asn || 'Unknown'} - {ipInfo.asn.name || 'Unknown'}</p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-700 p-4 rounded-lg">
                  <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                    <Globe className="w-4 h-4" /> Geolocation
                  </h4>
                  <div className="space-y-2">
                    <div>
                      <p className="text-gray-400 text-sm">Location</p>
                      <p className="text-white">
                        {[ipInfo.location.city, ipInfo.location.region, ipInfo.location.country]
                          .filter(Boolean).join(', ') || 'Unknown'}
                      </p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Coordinates</p>
                      <p className="text-white">
                        {ipInfo.location.lat && ipInfo.location.lon 
                          ? `${ipInfo.location.lat}, ${ipInfo.location.lon}` 
                          : 'Unknown'}
                      </p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Postal Code</p>
                      <p className="text-white">{ipInfo.location.postal || 'Unknown'}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Timezone</p>
                      <p className="text-white">{ipInfo.location.timezone || 'Unknown'}</p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div className="bg-gray-700 p-4 rounded-lg">
                  <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                    <Network className="w-4 h-4" /> DNS Records
                  </h4>
                  <div className="space-y-2">
                    <div>
                      <p className="text-gray-400 text-sm">MX Records</p>
                      <p className="text-white text-xs font-mono">
                        {ipInfo.dns.mx ? ipInfo.dns.mx.join('\n') : 'None found'}
                      </p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">NS Records</p>
                      <p className="text-white text-xs font-mono">
                        {ipInfo.dns.ns ? ipInfo.dns.ns.join('\n') : 'None found'}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-700 p-4 rounded-lg">
                  <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                    <Info className="w-4 h-4" /> WHOIS Information
                  </h4>
                  <div className="space-y-2">
                    <div>
                      <p className="text-gray-400 text-sm">Registrar</p>
                      <p className="text-white">{ipInfo.whois.registrar || 'Unknown'}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Creation Date</p>
                      <p className="text-white">{ipInfo.whois.creation_date || 'Unknown'}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Network Type</p>
                      <p className="text-white">
                        {[
                          ipInfo.threat.is_tor && 'Tor',
                          ipInfo.threat.is_proxy && 'Proxy',
                          ipInfo.threat.is_vpn && 'VPN'
                        ].filter(Boolean).join(' / ') || 'Regular'}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              {ipInfo.ports.length > 0 && (
                <div className="bg-gray-700 p-4 rounded-lg mb-6">
                  <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                    <Terminal className="w-4 h-4" /> Open Ports
                  </h4>
                  <div className="overflow-x-auto">
                    <table className="w-full text-white text-sm">
                      <thead>
                        <tr className="bg-gray-800">
                          <th className="p-2 text-left">Port</th>
                          <th className="p-2 text-left">Service</th>
                          <th className="p-2 text-left">Version</th>
                          <th className="p-2 text-left">State</th>
                        </tr>
                      </thead>
                      <tbody>
                        {ipInfo.ports.map((port, index) => (
                          <tr key={index} className="border-b border-gray-600">
                            <td className="p-2 font-mono">{port.port}</td>
                            <td className="p-2">{port.service}</td>
                            <td className="p-2 text-xs">{port.version || 'Unknown'}</td>
                            <td className="p-2">
                              <span className={`px-2 py-1 rounded-full text-xs ${
                                port.state === 'open' ? 'bg-green-800 text-green-200' : 
                                'bg-gray-600 text-gray-300'
                              }`}>
                                {port.state}
                              </span>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              )}
              
              {ipInfo.vulnerabilities.length > 0 && (
                <div className="bg-gray-700 p-4 rounded-lg">
                  <h4 className="text-white font-medium mb-2 flex items-center gap-2">
                    <ShieldAlert className="w-4 h-4 text-red-400" /> Potential Zero Day Vulnerabilities
                  </h4>
                  <div className="space-y-4">
                    {ipInfo.vulnerabilities.map((vuln, index) => (
                      <div key={index} className="border-l-4 pl-4 py-2" style={{
                        borderColor: 
                          vuln.severity === 'critical' ? '#ef4444' :
                          vuln.severity === 'high' ? '#f97316' :
                          vuln.severity === 'medium' ? '#eab308' :
                          '#84cc16'
                      }}>
                        <div className="flex justify-between items-start">
                          <h5 className="text-white font-medium">{vuln.name}</h5>
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            vuln.severity === 'critical' ? 'bg-red-900 text-red-100' :
                            vuln.severity === 'high' ? 'bg-orange-900 text-orange-100' :
                            vuln.severity === 'medium' ? 'bg-yellow-900 text-yellow-100' :
                            'bg-green-900 text-green-100'
                          }`}>
                            {vuln.severity.toUpperCase()}
                          </span>
                        </div>
                        {vuln.cve && (
                          <p className="text-gray-400 text-xs font-mono mt-1">CVE: {vuln.cve}</p>
                        )}
                        <p className="text-gray-300 text-sm mt-1">{vuln.description}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            <button
              onClick={resetForm}
              className="w-full bg-gray-700 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors"
            >
              Scan New Target
            </button>
          </div>
        ) : (
          <div className="space-y-4">
            <div>
              <label className="block text-white mb-2">
                Target IP Address
              </label>
              <input
                type="text"
                value={ipAddress}
                onChange={(e) => setIpAddress(e.target.value)}
                placeholder="e.g., 192.168.1.1"
                className="w-full bg-gray-700 text-white p-3 rounded-lg mb-4 border border-gray-600 focus:border-blue-500 focus:outline-none"
              />
            </div>
            
            <button
              onClick={fetchIpInfo}
              disabled={isLoading}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {isLoading ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  Scanning Target...
                </>
              ) : (
                <>
                  <Zap className="w-4 h-4" /> Initiate Zero Day Scan
                </>
              )}
            </button>
          </div>
        )}
      </div>
    </div>
  );
}